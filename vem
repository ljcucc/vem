#!/usr/bin/env python3
import sys
import os
from os import path
# import argparse
# from argparse import RawTextHelpFormatter

from mpu.command import CmdInfo, Command, CommandManager

from mpu.cmds import *

from mpu.controllers.args_controller import ArgsController
from mpu.controllers.config_controller import ConfigController
from mpu.controllers.instance_controller import InstanceController

from mpu.controllers.engine.mp_controller import InstanceInfo, MPController
from mpu.controllers.engine.docker_controller import *

# TODO: read config file and return different InstanceController for different platform
def getInstanceController() -> InstanceInfo:
  """get instance controller by config"""

  cc = ConfigController()
  if(not cc.exists()):
    print("engine: default (multipass)")
    return MPController()

  config = cc.getConfig()
  print(f"engine: {config.engine}")

  if(config.engine == "multipass"):
    return MPController()
  
  if(config.engine == "docker"):
    return DockerController()
  
  raise Exception("Engine not found!")

ic:InstanceController = getInstanceController()

command_list = CommandManager([
  Command(CmdInfo("help", "display help")),
  InitCommand(ic),

  StartCommand(ic),
  StopCommand(ic),

  InfoCommand(ic),
  RemoveCommand(ic),
  PkgCommand(ic),
  ConfigCommand(),
  ExecCommand(ic),
  RunCommand(ic),
  DoctorCommand()
])

command_list.cmds[0] = HelpCommand(command_list)

def main():
  global command_list

  ac = ArgsController()

  if(not ac.isValidCmd()):
    print(command_list.disp_help())
    exit(0)

  if(not command_list.run(ac)):
    print(command_list.disp_help())
    exit(1)

if __name__ == "__main__":
  main()
else:
  print("Do not run this program without main")
  exit(1)